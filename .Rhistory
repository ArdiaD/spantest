if (!inherits(test_result, "try-error")) {
results_yearly <- rbind(
results_yearly,
data.frame(Year = y, P_Value = test_result$pval)
)
} else {
results_yearly <- rbind(
results_yearly,
data.frame(Year = y, P_Value = NA)
)
}
} else {
results_yearly <- rbind(
results_yearly,
data.frame(Year = y, P_Value = NA)
)
}
}
# Print or visualize the results
print(results_yearly)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
results_rolling
res
length(rolling_dates)
head(rolling_dates)
tail(rolling_dates)
# =============================
# Expanding 1-year rolling p-values
# =============================
rolling_dates <- index(merged_returns)["2001/"]
rolling_dates
merged_returns
index(merged_returns)
# =============================
# Expanding 1-year rolling p-values
# =============================
rolling_dates <- index(merged_returns)
rolling_dates
rolling_dates <- rolling_dates[!is.na(rolling_dates)]  # Supprimer les Ã©ventuels NA
results_rolling <- lapply(rolling_dates, function(d) {
d <- suppressWarnings(as.Date(d))
if (is.na(d)) return(NULL)
start <- d - 365
ret <- merged_returns[paste0(start, "/", d)]
if (nrow(ret) < 50) return(NULL)
R1 <- ret[, R1_names, drop = FALSE]
R2 <- ret[, R2_names, drop = FALSE]
res <- run_all_spanning_tests(R1, R2)
res_vec <- unlist(res)
valid_idx <- !is.na(res_vec)
if (sum(valid_idx) == 0) return(NULL)
data.frame(
date = rep(d, sum(valid_idx)),
test = names(res_vec)[valid_idx],
pval = res_vec[valid_idx]
)
})
results_rolling_clean <- results_rolling[sapply(results_rolling, is.data.frame)]
df_rolling <- do.call(rbind, results_rolling_clean)
df_rolling$type <- "Rolling"
# =============================
# Combine and plot
# =============================
df_all <- rbind(df_yearly, df_rolling)
ggplot(df_all, aes(x = date, y = pval, color = test, linetype = type)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
labs(title = "P-values of Spanning Tests (European Assets vs North American Benchmark)",
x = "Date", y = "P-Value", color = "Test", linetype = "Type") +
theme_minimal()
ggplot(df_all, aes(x = date, y = pval, linetype = type)) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
facet_wrap(~ test, scales = "free_y") +
labs(
title = "P-values of Spanning Tests by Method",
x = "Date", y = "P-Value", linetype = "Type"
) +
theme_minimal() +
theme(strip.text = element_text(face = "bold"))
df_rolling
res <- run_all_spanning_tests(R1, R2)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg.R", echo = TRUE)
results_rolling
results_rolling_clean
df_rolling
# =============================
# Combine and plot
# =============================
df_all <- rbind(df_yearly, df_rolling)
df_all
ggplot(df_all, aes(x = date, y = pval, linetype = type)) +
geom_line(color = "steelblue") +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
facet_wrap(~ test, scales = "free_y") +
labs(
title = "P-values of Spanning Tests by Method",
x = "Date", y = "P-Value", linetype = "Type"
) +
theme_minimal() +
theme(strip.text = element_text(face = "bold"))
set.seed(1)
bench <- matrix(rnorm(200 * 3), ncol = 3)  # 3 benchmark assets
test  <- matrix(rnorm(200 * 2), ncol = 2)  # 2 test assets
res_as <- span_as(bench, test, control = list(ks = c(1/3), L = c(2)))
print(res_as)
df_rolling
results_rolling
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_monthly_rolling.R", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
df_rolling
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
df_yearly
merged_returns
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
devtools::load_all(".")
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/02 empirical paper/01 Run_empirical.R", echo = TRUE)
devtools::load_all(".")
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
df_rolling
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_monthly_rolling.R", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
results_yearly
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
results_yearly
R1
source("~/.active-rstudio-document", echo = TRUE)
results_yearly
results_rolling
results_yearly
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
# Format GL_a output for plotting
format_result <- function(res_list, test_name) {
do.call(rbind, lapply(names(res_list), function(yr) {
res <- res_list[[yr]]
components <- res$results[[test_name]]
if (is.null(components) || !is.list(components)) return(NULL)
# Iterate through each sub-component (GL, GRS, HK, etc.)
out <- lapply(names(components), function(subname) {
sub <- components[[subname]]
if (inherits(sub, "list")) {
# Try to extract pvals and stats from the sub-list
flat <- unlist(sub)
flat <- flat[sapply(flat, is.numeric)]
if (length(flat) == 0) return(NULL)
data.frame(
date = as.Date(paste0(yr, "-12-31")),
test = subname,
pval = as.numeric(flat),
label = names(flat),
stringsAsFactors = FALSE
)
} else {
NULL
}
})
do.call(rbind, out)
}))
}
pvals_gl_a <- format_result(results_yearly, "GL_a")
# Plot full f_span_gl_a results
if (!is.null(pvals_gl_a) && nrow(pvals_gl_a) > 0 && "pval" %in% names(pvals_gl_a)) {
ggplot(pvals_gl_a, aes(x = date, y = pval, color = label)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "black") +
theme_minimal() +
labs(title = "P-values from f_span_gl_a (full)", x = "Date", y = "P-Value")
} else {
warning("No valid p-values to plot. Check your results_yearly object.")
}
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
str(results_yearly[[1]]$results$GL_a)
source("~/.active-rstudio-document", echo = TRUE)
pvals_gl_a
source("~/.active-rstudio-document", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_monthly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/R/tests_to_review.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/R/tests_to_review.R", echo = TRUE)
pvals_gl_a
library(pbapply)
library(quantmod)
library(dplyr)
library(xts)
library(tidyr)
library(ggplot2)
library(spantest)
# -------------------------
# 1. Download and process data
# -------------------------
tickers <- c("^OEX", "^GSPTSE", "^FTSE", "^FCHI")
names(tickers) <- c("OEX", "GSPTSE", "FTSE", "FCHI")
getSymbols(tickers, src = "yahoo", from = "2000-01-01", auto.assign = TRUE)
process_symbol <- function(name) {
symbol_data <- get(name)
price <- Ad(symbol_data)
price_filled <- na.locf(price)
returns <- price_filled / lag(price_filled) - 1  # arithmetic returns
colnames(returns) <- name
return(na.omit(returns))  # omit initial NA due to lag
}
returns_list <- lapply(names(tickers), process_symbol)
merged_returns <- do.call(merge, returns_list)
merged_returns
colSums(is.na(merged_returns))
for (col in colnames(merged_returns_filled)) {
col_mean <- mean(merged_returns_filled[[col]], na.rm = TRUE)
merged_returns_filled[[col]][is.na(merged_returns_filled[[col]])] <- col_mean
}
merged_returns <- do.call(merge, returns_list)
for (col in colnames(merged_returns)) {
col_mean <- mean(merged_returns[[col]], na.rm = TRUE)
merged_returns[[col]][is.na(merged_returns[[col]])] <- col_mean
}
colnames(merged_returns)
colSums(is.na(merged_returns))
for (col in colnames(merged_returns)) {
col_mean <- mean(merged_returns[[col]], na.rm = TRUE)
merged_returns[[col]][is.na(merged_returns[[col]])] <- col_mean
}
library(pbapply)
library(quantmod)
library(dplyr)
library(xts)
library(tidyr)
library(ggplot2)
library(spantest)
# -------------------------
# 1. Download and process data
# -------------------------
tickers <- c("^OEX", "^GSPTSE", "^FTSE", "^FCHI")
names(tickers) <- c("OEX", "GSPTSE", "FTSE", "FCHI")
getSymbols(tickers, src = "yahoo", from = "2000-01-01", auto.assign = TRUE)
process_symbol <- function(name) {
symbol_data <- get(name)
price <- Ad(symbol_data)
price_filled <- na.locf(price)
returns <- price_filled / lag(price_filled) - 1  # arithmetic returns
colnames(returns) <- name
return(na.omit(returns))  # omit initial NA due to lag
}
returns_list <- lapply(names(tickers), process_symbol)
merged_returns <- do.call(merge, returns_list)
for (col in colnames(merged_returns)) {
col_mean <- mean(merged_returns[[col]], na.rm = TRUE)
merged_returns[[col]][is.na(merged_returns[[col]])] <- col_mean
}
for (col in colnames(merged_returns)) {
col_mean <- mean(merged_returns[[col]], na.rm = TRUE)
merged_returns[col][is.na(merged_returns[[col]])] <- col_mean
}
for (col in colnames(merged_returns)) {
col_mean <- mean(merged_returns[col], na.rm = TRUE)
merged_returns[col][is.na(merged_returns[[col]])] <- col_mean
}
for (col in names(tickers)) {
col_mean <- mean(merged_returns[[col]], na.rm = TRUE)
merged_returns[[col]][is.na(merged_returns[[col]])] <- col_mean
}
for (col in names(tickers)) {
print(col)
}
merged_returns[["OEX"]]
merged_returns["OEX"]
merged_returns[OEX]
merged_returns[,"OEX"]
for (col in names(tickers)) {
col_mean <- mean(merged_returns[, col], na.rm = TRUE)
merged_returns[, col][is.na(merged_returns[, col])] <- col_mean
}
merged_returns
colSums(is.na(merged_returns))
R1_names <- c("OEX", "GSPTSE")   # Benchmark: US + Canada
R2_names <- c("FTSE", "FCHI")   # Test: Europe
# -------------------------
# 2. Spanning test function
# -------------------------
run_all_spanning_tests <- function(R1, R2) {
res <- list(
grs = tryCatch(span_grs(R1, R2)$pval, error = function(e) NA),
py  = tryCatch(span_py(R1, R2)$pval, error = function(e) NA),
km  = tryCatch(span_km(R1, R2)$pval, error = function(e) NA),
hk  = tryCatch(span_hk(R1, R2)$pval, error = function(e) NA),
f1  = tryCatch(span_f1(R1, R2)$pval, error = function(e) NA),
f2  = tryCatch(span_f2(R1, R2)$pval, error = function(e) NA),
bj  = tryCatch(span_bj(R1, R2)$pval, error = function(e) NA),
gl_a  = tryCatch(span_gl_a(R1, R2, control = list(do_trace = FALSE))$pval_LMC, error = function(e) NA),
gl_ad = tryCatch(span_gl_ad(R1, R2, control = list(do_trace = FALSE))$pval_LMC, error = function(e) NA)
)
as_vals <- tryCatch(span_as(R1, R2, control = list(ks = c(1/3), L = c(2))), error = function(e) NULL)
if (!is.null(as_vals)) {
names(as_vals) <- paste0("as_", names(as_vals))
res <- c(res, as_vals)
}
return(res)
}
# -------------------------
# 3. Static year-end results
# -------------------------
years <- unique(format(index(merged_returns), "%Y"))
results_yearly <- pblapply(years, function(y) {
ret_year <- merged_returns[paste0(y, "/")]
if (nrow(ret_year) < 50) return(NULL)
R1 <- ret_year[, R1_names, drop = FALSE]
R2 <- ret_year[, R2_names, drop = FALSE]
print(R1)
print(R2)
res <- run_all_spanning_tests(R1, R2)
res_vec <- unlist(res)
valid_idx <- !is.na(res_vec)
data.frame(
date = rep(as.Date(paste0(y, "-12-31")), sum(valid_idx)),
test = names(res_vec)[valid_idx],
pval = res_vec[valid_idx]
)
})
df_yearly <- do.call(rbind, results_yearly)
df_yearly$type <- "Year-end"
df_yearly
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/Package_V.1.0/spantest/example_pkg_yearly_rolling.R", echo = TRUE)
df_yearly
returns_list
# ---------------------------
# 1. Initialization
# ---------------------------
rm(list = ls())
library("readxl")
library("pacman")
library("tidyr")
p_load("parallel", "foreach", "doParallel", "ggplot2", "here")
library("spantest")
source("Functions_utils_data.R")
# ---------------------------
# 2. Parameters and Paths
# ---------------------------
name.list <- list("S&P100I", "SWISSMI", "EUNX100")
annee.list <- 2007:2022
# Load FF5 data
FF5 <- read.csv("data/RIFF_5.csv")
FF5_dates <- as.Date(as.character(FF5$X), format = "%Y%m%d")
FF5_years <- format(FF5_dates, "%Y")
databases <- lapply(name.list, function(name) {
# For each year in the analysis
lapply(annee.list, function(annee) {
# Get the vector of Fama-French dates corresponding to this year
id <- FF5_dates[FF5_years == annee]
# Read the corresponding Excel file for this universe and year
# Files are assumed to be named like: "data/RI<S&P100I>.xlsx", etc.
db <- read_excel(paste0("data/RI", name, ".xlsx"), sheet = paste0(annee))
# Rename the first column to "Name" (which contains date strings)
colnames(db)[1] <- "Name"
# Convert the "Name" column from YYYYMMDD string to Date objects
dates <- as.Date(db$Name, format = "%Y%m%d")
# Identify which rows have valid dates matching Fama-French dates for the year
valid_rows <- dates %in% id
# Keep only rows with valid dates
db <- db[valid_rows, ]
# Convert all remaining columns (excluding the first) to numeric
db[, -1] <- apply(db[, -1], 2, as.numeric)
# Return the cleaned and filtered dataframe for this universe-year pair
return(db)
})
})
names(databases) <- name.list
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
??span_as
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
dim(pvals_list)
str(pvals_list)
length(pvals_list)
output
devtools::load_all(".")
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
outout
output
outputs$pvals
outputs$pvals[, 1]
ncol(outputs$pvals)
idx_standard
idx_GL_a
idx_GL_ad
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
OutputData
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_simulation.R", echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(spantest)
library(qrmdata)
knitr::include_graphics("figures/fig_monthly_pvals.png")
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_empirical_yearly_rolling.R", echo = TRUE)
source("C:/Users/benj0/Dropbox/projet/_collaboration/project - spanning/GitHub/04 examples package/run_empirical_monthly_rolling_hk.R", echo = TRUE)
R CMD check --as-cran yourpackage
devtools::load_all(".")
R CMD check --as-cran spantest_1.1.0.tar.gz
install.packages(V8)
install.packages("V8")
library(knitr)
tests_df <- data.frame(
Name = c("span_hk", "span_gl_ad", "span_as", "", "span_gl_a", "span_grs", "span_f1", "span_bj", "span_py", "span_as", "", "span_km", "span_f2", "span_as"),
Reference = c(
"@HubermanKandel1987",
"@GungorLuger2016",
"To be published",
"",
"@GungorLuger2016",
"@GRS1989",
"@KanZhou2012",
"@BrittenJones1999",
"@PesaranYamagata2012",
"To be published",
"",
"@KempfMemmel2006",
"@KanZhou2012",
"To be published"
),
Hypothesis = c(
"$\\alpha = 0~\\&~ \\delta = 0$",
"$\\alpha = 0~\\&~ \\delta = 0$",
"$\\alpha = 0~\\&~ \\delta = 0$",
"",
"$\\alpha = 0$",
"$\\alpha = 0$",
"$\\alpha = 0$",
"$\\alpha = 0$",
"$\\alpha = 0$",
"$\\alpha = 0$",
"",
"$\\delta = 0$",
"$\\delta = 0$",
"$\\delta = 0$"
),
Restrictions = c(
"$T - K - N \\geq 1$",
"None",
"None",
"",
"None",
"$T - K - N \\geq 1$",
"$T - K - N \\geq 1$",
"$T - K - N \\geq 1$",
"$T - K - N \\geq 1$",
"None",
"",
"$T - K - N \\geq 1$",
"$T - K - N \\geq 1$",
"None"
),
stringsAsFactors = FALSE
)
knitr::kable(
tests_df,
caption = "Summary of Spanning Tests Implemented or Planned in the `spantest` Package",
booktabs = TRUE,
align = "llll"
)
knitr::include_graphics("figures/fig_hk_pvals.png")
knitr::include_graphics("figures/fig_as_pvals_bigK_smallN.png")
knitr::include_graphics("figures/fig_as_pvals_bigN_smallK.png")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("devtools")
install.packages("Rtools")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
